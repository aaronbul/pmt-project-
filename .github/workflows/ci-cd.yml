name: PMT CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  BACKEND_IMAGE: pmt-backend
  FRONTEND_IMAGE: pmt-frontend
  DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
  DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

jobs:
  # Tests Backend
  test-backend:
    name: Tests Backend (Spring Boot)
    runs-on: ubuntu-latest
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: pmt_test_db
          MYSQL_USER: test_user
          MYSQL_PASSWORD: test_password
        options: >-
          --health-cmd "mysqladmin ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 3306:3306

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: 'maven'

    - name: Cache Maven packages
      uses: actions/cache@v4
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2

    - name: Run backend tests
      run: |
        cd pmt-backend
        mvn clean test jacoco:report
      env:
        SPRING_PROFILES_ACTIVE: test

    - name: Upload backend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-test-results
        path: pmt-backend/target/surefire-reports/
        retention-days: 30

    - name: Upload backend coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-coverage-report
        path: pmt-backend/target/site/jacoco/
        retention-days: 30

  # Tests Frontend
  test-frontend:
    name: Tests Frontend (Angular)
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: pmt-frontend/package-lock.json

    - name: Install dependencies
      run: |
        cd pmt-frontend
        npm ci

    - name: Run frontend tests
      run: |
        cd pmt-frontend
        npm run test:coverage

    - name: Upload frontend test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-test-results
        path: pmt-frontend/coverage/
        retention-days: 30

  # Build et Push Docker Images
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ env.DOCKER_USERNAME }}
        password: ${{ env.DOCKER_PASSWORD }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}
          ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./pmt-backend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./pmt-frontend
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # D√©ploiement (optionnel - pour d√©monstration)
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to staging server
      run: |
        echo "üöÄ D√©ploiement sur le serveur de staging..."
        echo "Images d√©ploy√©es :"
        echo "- ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.BACKEND_IMAGE }}:${{ github.sha }}"
        echo "- ${{ env.REGISTRY }}/${{ env.DOCKER_USERNAME }}/${{ env.FRONTEND_IMAGE }}:${{ github.sha }}"
        echo "‚úÖ D√©ploiement termin√© !"

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, build-and-push]
    if: always()

    steps:
    - name: Notify on success
      if: needs.test-backend.result == 'success' && needs.test-frontend.result == 'success'
      run: |
        echo "‚úÖ Pipeline r√©ussi !"
        echo "üìä Tests backend et frontend pass√©s"
        echo "üê≥ Images Docker publi√©es"

    - name: Notify on failure
      if: needs.test-backend.result == 'failure' || needs.test-frontend.result == 'failure'
      run: |
        echo "‚ùå Pipeline √©chou√© !"
        echo "üîç V√©rifiez les logs pour plus de d√©tails"
        exit 1 